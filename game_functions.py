#coding=utf-8
import sys
import pygame
from bullet import Bullet
from time import sleep
from alien import Alien
import file_io

def check_keydown_events(event, ai_settings, screen, ship, bullets, status):
	#"""响应按键"""
	if event.key == pygame.K_RIGHT:
		ship.moving_right = True
	elif event.key == pygame.K_LEFT:
		ship.moving_left = True
	elif event.key == pygame.K_SPACE and status.game_active == True:
		fire_bullet(ai_settings, screen, ship, bullets)
	elif event.key == pygame.K_q:
		file_io.writedata(status.high_score, ai_settings.store_file)
		sys.exit()
		
def fire_bullet(ai_settings, screen, ship, bullets):
	#"""如果还没有到达限制，就发射一颗子弹"""	
	#创建新子弹，并将其加入到编组bullets中
	if len(bullets) < ai_settings.bullets_allowed:
		new_bullet = Bullet(ai_settings, screen, ship)
		bullets.add(new_bullet)

def check_keyup_events(event, ship):
	#"""响应松开"""
	if event.key == pygame.K_RIGHT:
		ship.moving_right = False
	elif event.key == pygame.K_LEFT:
		ship.moving_left = False

def check_events(ai_settings, screen, status, play_button, ship, aliens, bullets, sb):
	#"""响应按键和鼠标事件"""
	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			sys.exit()
		elif event.type == pygame.KEYDOWN:
			check_keydown_events(event, ai_settings, screen, ship, bullets, status)
		elif event.type == pygame.KEYUP:
			check_keyup_events(event, ship)
		elif event.type == pygame.MOUSEBUTTONDOWN:
			mouse_x, mouse_y = pygame.mouse.get_pos()
			check_play_button(ai_settings, screen, status, play_button, ship, aliens, bullets, mouse_x, mouse_y, sb)
			

def check_play_button(ai_settings, screen, status, play_button, ship, aliens, bullets, mouse_x, mouse_y, sb):
	#"""在玩家单击Play按钮时开始新游戏"""
	button_clicked = play_button.rect.collidepoint(mouse_x, mouse_y)
	if button_clicked and not status.game_active:		
		# 重置游戏设置
		ai_settings.initialize_dynamic_settings()
		# 隐藏光标
		pygame.mouse.set_visible(False)
		#重置游戏统计信息
		# 重置游戏统计信息
		status.reset_status()		
		status.game_active = True		
		# 重置记分牌图像
		sb.prep_score()
		sb.prep_high_score()
		sb.prep_level()
		sb.prep_ships()
		# 清空外星人列表和子弹列表
		aliens.empty()
		bullets.empty()
		# 创建一群新的外星人，并让飞船居中
		create_fleet(ai_settings, screen, ship, aliens)
		ship.center_ship()
		#status.ships_left = status.ai_settings.ship_limit
			
def update_bullets(ai_settings, screen, ship, aliens, bullets, status, sb):
	#"""更新子弹的位置，并删除已消失的子弹"""
	# 更新子弹的位置
	bullets.update()
	# 删除已消失的子弹
	for bullet in bullets.copy():
		if bullet.rect.bottom <= 0:
			bullets.remove(bullet)
	# 检查是否有子弹击中了外星人
	# 如果是这样，就删除相应的子弹和外星人	
	check_bullet_alien_collisions(ai_settings, screen, ship, aliens, bullets, status, sb)
		
def check_bullet_alien_collisions(ai_settings, screen, ship, aliens, bullets, status, sb):
	#"""响应子弹和外星人的碰撞"""
	# 删除发生碰撞的子弹和外星人
	collisions = pygame.sprite.groupcollide(bullets, aliens, True, True)
	if collisions:
		for aliens in collisions.values():
			status.score += ai_settings.alien_points * len(aliens)
			sb.prep_score()
		check_high_score(status, sb)
	if len(aliens) == 0:
		# 删除现有的所有子弹，并创建一个新的外星人群
		bullets.empty()
		ai_settings.increase_speed()
		# 提高等级
		status.level += 1
		sb.prep_level()
		create_fleet(ai_settings, screen, ship, aliens)
		
def check_high_score(status, sb):
	#"""检查是否诞生了新的最高得分"""
	if status.score > status.high_score:
		status.high_score = status.score
		sb.prep_high_score()
				
def update_screen(ai_settings, screen, status, ship, aliens, bullets, play_button, sb):
	#更新屏幕上的图像，并切换到新屏幕
	# 每次循环时都重绘屏幕
	screen.fill(ai_settings.bg_color)	
	# 在飞船和外星人后面重绘所有子弹
	for bullet in bullets.sprites():
		bullet.draw_bullet()
	ship.blitme()
	#aliens.blitme()
	aliens.draw(screen)
	# 如果游戏处于非活动状态，就绘制Play按钮
	if not status.game_active:
		play_button.draw_button()
	sb.show_score()
	# 让最近绘制的屏幕可见
	pygame.display.flip()
	
	


def get_number_aliens_x(ai_settings, alien_width):
	#"""计算每行可容纳多少个外星人"""
	available_space_x = ai_settings.screen_width - 2 * alien_width
	number_aliens_x = int(available_space_x / (2 * alien_width))
	return number_aliens_x
	
def get_number_rows(ai_settings, ship_height, alien_height):
	#"""计算屏幕可容纳多少行外星人"""
	available_space_y = (ai_settings.screen_height - (3 * alien_height) - ship_height)
	number_rows = int(available_space_y / (2 * alien_height))
	return number_rows
	
def create_alien(ai_settings, screen, aliens, alien_number, row_number):
	#"""创建一个外星人并将其放在当前行"""
	alien = Alien(ai_settings, screen)
	alien_width = alien.rect.width
	alien.x = alien_width + 2 * alien_width * alien_number
	alien.rect.x = alien.x
	alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
	aliens.add(alien)


def create_fleet(ai_settings, screen, ship, aliens):
	#"""创建外星人群"""	
	# 创建一个外星人，并计算一行可容纳多少个外星人
	# 外星人间距为外星人宽度
	alien = Alien(ai_settings, screen)
	number_aliens_x = get_number_aliens_x(ai_settings, alien.rect.width)
	number_rows = get_number_rows(ai_settings, ship.rect.height, alien.rect.height)
	# 创建第一行外星人
	for row_number in range(number_rows):
		for alien_number in range(number_aliens_x):
			create_alien(ai_settings, screen, aliens, alien_number, row_number)

def check_fleet_edges(ai_settings, aliens):
#"""有外星人到达边缘时采取相应的措施"""
	for alien in aliens.sprites():
		if alien.check_edges():
			change_fleet_direction(ai_settings, aliens)
			break
			
def change_fleet_direction(ai_settings, aliens):
	#"""将整群外星人下移，并改变它们的方向"""
	for alien in aliens.sprites():
		alien.rect.y += ai_settings.fleet_drop_speed
	ai_settings.fleet_direction *= -1

def ship_hit(ai_settings, status, screen, ship, aliens, bullets, sb):
	#"""响应被外星人撞到的飞船"""
	# 将ships_left减1
	if status.ships_left > 1:
		status.ships_left -= 1
		# 清空外星人列表和子弹列表
		# 更新记分牌
		sb.prep_ships()
		aliens.empty()
		bullets.empty()
		# 创建一群新的外星人，并将飞船放到屏幕底端中央
		create_fleet(ai_settings, screen, ship, aliens)
		ship.center_ship()
		# 暂停
		sleep(0.5)
	else:
		status.ships_left -= 1
		sb.prep_ships()
		status.game_active = False
		pygame.mouse.set_visible(True)

def update_aliens(ai_settings, status, screen, ship, aliens, bullets, sb):
	#"""	
	#检查是否有外星人位于屏幕边缘，并更新整群外星人的位置
	#"""
	check_fleet_edges(ai_settings, aliens)
	aliens.update()
	
	# 检测外星人和飞船之间的碰撞
	if pygame.sprite.spritecollideany(ship, aliens):
		ship_hit(ai_settings, status, screen, ship, aliens, bullets, sb)
		
	# 检查是否有外星人到达屏幕底端
	check_aliens_bottom(ai_settings, status, screen, ship, aliens, bullets, sb)
		
def check_aliens_bottom(ai_settings, status, screen, ship, aliens, bullets, sb):
	#"""检查是否有外星人到达了屏幕底端"""
	screen_rect = screen.get_rect()	
	for alien in aliens.sprites():
		if alien.rect.bottom >= screen_rect.bottom:
			# 像飞船被撞到一样进行处理
			ship_hit(ai_settings, status, screen, ship, aliens, bullets, sb)
			break
		

	
#def dectet_fire(bullets, aliens):
	#for bullet in bullets.sprites():
		#for alien in aliens.sprites():
			#if(bullet.rect.top <= alien.rect.bottom and bullet.rect.bottom > alien.rect.top and bullet.rect.right >= alien.rect.left and bullet.rect.left <= alien.rect.right):
				#aliens.remove(alien)
